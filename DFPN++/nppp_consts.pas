{
    Delphi Foundation for creating plugins for Notepad++
    (Short: DFPN++)

    Copyright (C) 2009 Bastian Blumentritt

    This file is part of DFPN++.

    DFPN++ is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DFPN++ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DFPN++.  If not, see <http://www.gnu.org/licenses/>.
}

unit nppp_consts;

interface

uses
  Messages;

const
  MAXFUNCNAMELENGTH=64;

   (*
{} at beginning of line means: this message is currently not implemented
   in a method
   *)
  { Constants for messages regarding Notepad++ Plugin interface }
  // refer http://notepad-plus.sourceforge.net/uk/plugins-HOWTO.php
  NPPMSG = (WM_USER + 1000);
  NPPM_GETCURRENTSCINTILLA = (NPPMSG + 4);
  NPPM_GETCURRENTLANGTYPE = (NPPMSG + 5);
  NPPM_SETCURRENTLANGTYPE = (NPPMSG + 6);
{}NPPM_GETNBOPENFILES = (NPPMSG + 7);
{}ALL_OPEN_FILES = 0;
{}PRIMARY_VIEW = 1;
{}SECOND_VIEW = 2;
{}NPPM_GETOPENFILENAMES = (NPPMSG + 8);
  NPPM_MODELESSDIALOG = (NPPMSG + 12);
  MODELESSDIALOGADD = 0;
  MODELESSDIALOGREMOVE = 1;
{}NPPM_GETNBSESSIONFILES = (NPPMSG + 13);
{}NPPM_GETSESSIONFILES = (NPPMSG + 14);
{}NPPM_SAVESESSION = (NPPMSG + 15);
{}NPPM_SAVECURRENTSESSION = (NPPMSG + 16);
{}NPPM_GETOPENFILENAMESPRIMARY = (NPPMSG + 17);
{}NPPM_GETOPENFILENAMESSECOND = (NPPMSG + 18);
{}NPPM_CREATESCINTILLAHANDLE = (NPPMSG + 20);
{}NPPM_DESTROYSCINTILLAHANDLE = (NPPMSG + 21);
{}NPPM_GETNBUSERLANG = (NPPMSG + 22);
{}NPPM_GETCURRENTDOCINDEX = (NPPMSG + 23);
{}MAIN_VIEW = 0;
{}SUB_VIEW = 1;
{}NPPM_SETSTATUSBAR = (NPPMSG + 24);
{}STATUSBAR_DOC_TYPE = 0;
{}STATUSBAR_DOC_SIZE = 1;
{}STATUSBAR_CUR_POS = 2;
{}STATUSBAR_EOF_FORMAT = 3;
{}STATUSBAR_UNICODE_TYPE = 4;
{}STATUSBAR_TYPING_MODE = 5;
{}NPPM_GETMENUHANDLE = (NPPMSG + 25);
{}NPPPLUGINMENU = 0;
{}NPPM_ENCODESCI = (NPPMSG + 26);
{}NPPM_DECODESCI = (NPPMSG + 27);
{}NPPM_ACTIVATEDOC = (NPPMSG + 28);
{}NPPM_LAUNCHFINDINFILESDLG = (NPPMSG + 29);
  NPPM_DMMSHOW = (NPPMSG + 30);
  NPPM_DMMHIDE = (NPPMSG + 31);
{}NPPM_DMMUPDATEDISPINFO = (NPPMSG + 32);
  NPPM_DMMREGASDCKDLG = (NPPMSG + 33);
{}NPPM_LOADSESSION = (NPPMSG + 34);
{}NPPM_DMMVIEWOTHERTAB = (NPPMSG + 35);
{}NPPM_RELOADFILE = (NPPMSG + 36);
{}NPPM_SWITCHTOFILE = (NPPMSG + 37);
{}NPPM_SAVECURRENTFILE = (NPPMSG + 38);
{}NPPM_SAVEALLFILES = (NPPMSG + 39);
{}NPPM_SETMENUITEMCHECK = (NPPMSG + 40);
  NPPM_ADDTOOLBARICON = (NPPMSG + 41);
  NPPM_GETWINDOWSVERSION = (NPPMSG + 42);
{}NPPM_DMMGETPLUGINHWNDBYNAME = (NPPMSG + 43);
{}NPPM_MAKECURRENTBUFFERDIRTY = (NPPMSG + 44);
{}NPPM_GETENABLETHEMETEXTUREFUNC = (NPPMSG + 45);
{}NPPM_GETPLUGINSCONFIGDIR = (NPPMSG + 46);
{}NPPM_MSGTOPLUGIN = (NPPMSG + 47);
  NPPM_MENUCOMMAND = (NPPMSG + 48);
{}NPPM_TRIGGERTABBARCONTEXTMENU = (NPPMSG + 49);
{}NPPM_GETNPPVERSION = (NPPMSG + 50);
{}NPPM_HIDETABBAR = (NPPMSG + 51);
{}NPPM_ISTABBARHIDDEN = (NPPMSG + 52);
{}NPPM_GETPOSFROMBUFFERID = (NPPMSG + 57);
{}NPPM_GETFULLPATHFROMBUFFERID = (NPPMSG + 58);
{}NPPM_GETBUFFERIDFROMPOS = (NPPMSG + 59);
{}NPPM_GETCURRENTBUFFERID = (NPPMSG + 60);
{}NPPM_RELOADBUFFERID = (NPPMSG + 61);
{}NPPM_GETBUFFERLANGTYPE = (NPPMSG + 64);
{}NPPM_SETBUFFERLANGTYPE = (NPPMSG + 65);
{}NPPM_GETBUFFERENCODING = (NPPMSG + 66);
{}NPPM_SETBUFFERENCODING = (NPPMSG + 67);
{}NPPM_GETBUFFERFORMAT = (NPPMSG + 68);
{}NPPM_SETBUFFERFORMAT = (NPPMSG + 69);
{}NPPM_ADDREBAR = (NPPMSG + 57);
{}NPPM_UPDATEREBAR = (NPPMSG + 58);
{}NPPM_REMOVEREBAR = (NPPMSG + 59);
{}NPPM_HIDETOOLBAR = (NPPMSG + 70);
{}NPPM_ISTOOLBARHIDDEN = (NPPMSG + 71);
{}NPPM_HIDEMENU = (NPPMSG + 72);
{}NPPM_ISMENUHIDDEN = (NPPMSG + 73);
{}NPPM_HIDESTATUSBAR = (NPPMSG + 74);
{}NPPM_ISSTATUSBARHIDDEN = (NPPMSG + 75);
{}NPPM_GETSHORTCUTBYCMDID = (NPPMSG + 76);
  NPPM_DOOPEN = (NPPMSG + 77);
  RUNCOMMAND_USER = (WM_USER + 3000);
{}VAR_NOT_RECOGNIZED = 0;
  FULL_CURRENT_PATH = 1;
{}CURRENT_DIRECTORY = 2;
{}FILE_NAME = 3;
{}NAME_PART = 4;
{}EXT_PART = 5;
  CURRENT_WORD = 6;
{}NPP_DIRECTORY = 7;
  CURRENT_LINE = 8;
  CURRENT_COLUMN = 9;
  NPPM_GETFULLCURRENTPATH = (RUNCOMMAND_USER + FULL_CURRENT_PATH);
{}NPPM_GETCURRENTDIRECTORY = (RUNCOMMAND_USER + CURRENT_DIRECTORY);
{}NPPM_GETFILENAME = (RUNCOMMAND_USER + FILE_NAME);
{}NPPM_GETNAMEPART = (RUNCOMMAND_USER + NAME_PART);
{}NPPM_GETEXTPART = (RUNCOMMAND_USER + EXT_PART);
  NPPM_GETCURRENTWORD = (RUNCOMMAND_USER + CURRENT_WORD);
{}NPPM_GETNPPDIRECTORY = (RUNCOMMAND_USER + NPP_DIRECTORY);
  NPPM_GETCURRENTLINE = (RUNCOMMAND_USER + CURRENT_LINE);
  NPPM_GETCURRENTCOLUMN = (RUNCOMMAND_USER + CURRENT_COLUMN);
  NPPM_GETCURRENTVIEW = NPPMSG + 88;

  { notification codes }
  NPPN_FIRST = 1000;
  NPPN_READY = (NPPN_FIRST + 1);              // To notify plugins that all the procedures of launchment of notepad++ are done.
  NPPN_TBMODIFICATION = (NPPN_FIRST + 2);     // To notify plugins that toolbar icons can be registered
{}NPPN_FILEBEFORECLOSE = (NPPN_FIRST + 3);    // To notify plugins that the current file is about to be closed
{}NPPN_FILEOPENED = (NPPN_FIRST + 4);         // To notify plugins that the current file is just opened
{}NPPN_FILECLOSED = (NPPN_FIRST + 5);         // To notify plugins that the current file is just closed
{}NPPN_FILEBEFOREOPEN = (NPPN_FIRST + 6);     // To notify plugins that the current file is about to be opened
{}NPPN_FILEBEFORESAVE = (NPPN_FIRST + 7);     // To notify plugins that the current file is about to be saved
{}NPPN_FILESAVED = (NPPN_FIRST + 8);          // To notify plugins that the current file is just saved
  NPPN_SHUTDOWN = (NPPN_FIRST + 9);           // To notify plugins that Notepad++ is about to be shutdowned.
{}NPPN_BUFFERACTIVATED = (NPPN_FIRST + 10);   // To notify plugins that a buffer was activated (put to foreground).
{}NPPN_LANGCHANGED = (NPPN_FIRST + 11);       // To notify plugins that the language in the current doc is just changed.
{}NPPN_WORDSTYLESUPDATED = (NPPN_FIRST + 12); // To notify plugins that user initiated a WordStyleDlg change.
{}NPPN_SHORTCUTREMAPPED = (NPPN_FIRST + 13);  // To notify plugins that plugin command shortcut is remapped.

  { Constants for messages regarding Notepad++ Menu Commands }
  IDM = 40000;

  IDM_FILE = (IDM + 1000);
  IDM_FILE_NEW = (IDM_FILE + 1);
{}IDM_FILE_OPEN = (IDM_FILE + 2);
{}IDM_FILE_CLOSE = (IDM_FILE + 3);
{}IDM_FILE_CLOSEALL = (IDM_FILE + 4);
{}IDM_FILE_CLOSEALL_BUT_CURRENT = (IDM_FILE + 5);
{}IDM_FILE_SAVE = (IDM_FILE + 6);
{}IDM_FILE_SAVEALL = (IDM_FILE + 7);
{}IDM_FILE_SAVEAS = (IDM_FILE + 8);
{}IDM_FILE_ASIAN_LANG = (IDM_FILE + 9);
{}IDM_FILE_PRINT = (IDM_FILE + 10);
{}IDM_FILE_PRINTNOW = 1001;
{}IDM_FILE_EXIT = (IDM_FILE + 11);
{}IDM_FILE_LOADSESSION = (IDM_FILE + 12);
{}IDM_FILE_SAVESESSION = (IDM_FILE + 13);
{}IDM_FILE_RELOAD = (IDM_FILE + 14);
{}IDM_FILEMENU_LASTONE = IDM_FILE_RELOAD;

{}IDM_EDIT = (IDM + 2000);
{}IDM_EDIT_CUT = (IDM_EDIT + 1);
{}IDM_EDIT_COPY = (IDM_EDIT + 2);
{}IDM_EDIT_UNDO = (IDM_EDIT + 3);
{}IDM_EDIT_REDO = (IDM_EDIT + 4);
{}IDM_EDIT_PASTE = (IDM_EDIT + 5);
{}IDM_EDIT_DELETE = (IDM_EDIT + 6);
{}IDM_EDIT_SELECTALL = (IDM_EDIT + 7);
{}IDM_EDIT_INS_TAB = (IDM_EDIT + 8);
{}IDM_EDIT_RMV_TAB = (IDM_EDIT + 9);
{}IDM_EDIT_DUP_LINE = (IDM_EDIT + 10);
{}IDM_EDIT_TRANSPOSE_LINE = (IDM_EDIT + 11);
{}IDM_EDIT_SPLIT_LINES = (IDM_EDIT + 12);
{}IDM_EDIT_JOIN_LINES = (IDM_EDIT + 13);
{}IDM_EDIT_LINE_UP = (IDM_EDIT + 14);
{}IDM_EDIT_LINE_DOWN = (IDM_EDIT + 15);
{}IDM_EDIT_UPPERCASE = (IDM_EDIT + 16);
{}IDM_EDIT_LOWERCASE = (IDM_EDIT + 17);
{}IDM_EDIT_BLOCK_COMMENT = (IDM_EDIT + 22);
{}IDM_EDIT_STREAM_COMMENT = (IDM_EDIT + 23);
{}IDM_EDIT_TRIMTRAILING = (IDM_EDIT + 24);
{}IDM_EDIT_RTL = (IDM_EDIT+26);
{}IDM_EDIT_LTR = (IDM_EDIT+27);
{}IDM_EDIT_SETREADONLY = (IDM_EDIT+28);
{}IDM_EDIT_FULLPATHTOCLIP = (IDM_EDIT+29);
{}IDM_EDIT_FILENAMETOCLIP = (IDM_EDIT+30);
{}IDM_EDIT_CURRENTDIRTOCLIP = (IDM_EDIT+31);
{}IDM_EDIT_CLEARREADONLY = (IDM_EDIT+33);
{}IDM_EDIT_COLUMNMODE = (IDM_EDIT+34);

{}IDM_EDIT_AUTOCOMPLETE = (50000+0);
{}IDM_EDIT_AUTOCOMPLETE_CURRENTFILE = (50000+1);
{}IDM_OPEN_ALL_RECENT_FILE = (IDM_EDIT + 40);

{}IDM_SEARCH = (IDM + 3000);
{}IDM_SEARCH_FIND = (IDM_SEARCH + 1);
{}IDM_SEARCH_FINDNEXT = (IDM_SEARCH + 2);
{}IDM_SEARCH_REPLACE = (IDM_SEARCH + 3);
{}IDM_SEARCH_GOTOLINE = (IDM_SEARCH + 4);
{}IDM_SEARCH_TOGGLE_BOOKMARK = (IDM_SEARCH + 5);
{}IDM_SEARCH_NEXT_BOOKMARK = (IDM_SEARCH + 6);
{}IDM_SEARCH_PREV_BOOKMARK = (IDM_SEARCH + 7);
{}IDM_SEARCH_CLEAR_BOOKMARKS = (IDM_SEARCH + 8);
{}IDM_SEARCH_GOTOMATCHINGBRACE = (IDM_SEARCH + 9);
{}IDM_SEARCH_FINDPREV = (IDM_SEARCH + 10);
{}IDM_SEARCH_FINDINCREMENT = (IDM_SEARCH + 11);
{}IDM_SEARCH_FINDINFILES = (IDM_SEARCH + 13);
{}IDM_SEARCH_VOLATILE_FINDNEXT = (IDM_SEARCH + 14);
{}IDM_SEARCH_VOLATILE_FINDPREV = (IDM_SEARCH + 15);
{}IDM_SEARCH_MARKALL = (IDM_SEARCH + 16);
{}IDM_SEARCH_UNMARKALL = (IDM_SEARCH + 17);

{}IDM_VIEW = (IDM + 4000);
{}IDM_VIEW_TOOLBAR_HIDE = (IDM_VIEW + 1);
{}IDM_VIEW_TOOLBAR_REDUCE = (IDM_VIEW + 2);
{}IDM_VIEW_TOOLBAR_ENLARGE = (IDM_VIEW + 3);
{}IDM_VIEW_TOOLBAR_STANDARD = (IDM_VIEW + 4);
{}IDM_VIEW_REDUCETABBAR = (IDM_VIEW + 5);
{}IDM_VIEW_LOCKTABBAR = (IDM_VIEW + 6);
{}IDM_VIEW_DRAWTABBAR_TOPBAR = (IDM_VIEW + 7);
{}IDM_VIEW_DRAWTABBAR_INACIVETAB = (IDM_VIEW + 8);
{}IDM_VIEW_STATUSBAR = (IDM_VIEW + 9);
{}IDM_VIEW_TOGGLE_FOLDALL = (IDM_VIEW + 10);
{}IDM_VIEW_USER_DLG = (IDM_VIEW + 11);
{}IDM_VIEW_LINENUMBER = (IDM_VIEW + 12);
{}IDM_VIEW_SYMBOLMARGIN = (IDM_VIEW + 13);
{}IDM_VIEW_FOLDERMAGIN = (IDM_VIEW + 14);
{}IDM_VIEW_FOLDERMAGIN_SIMPLE = (IDM_VIEW + 15);
{}IDM_VIEW_FOLDERMAGIN_ARROW = (IDM_VIEW + 16);
{}IDM_VIEW_FOLDERMAGIN_CIRCLE = (IDM_VIEW + 17);
{}IDM_VIEW_FOLDERMAGIN_BOX = (IDM_VIEW + 18);
{}IDM_VIEW_ALL_CHARACTERS = (IDM_VIEW + 19);
{}IDM_VIEW_INDENT_GUIDE = (IDM_VIEW + 20);
{}IDM_VIEW_CURLINE_HILITING = (IDM_VIEW + 21);
{}IDM_VIEW_WRAP = (IDM_VIEW + 22);
{}IDM_VIEW_ZOOMIN = (IDM_VIEW + 23);
{}IDM_VIEW_ZOOMOUT = (IDM_VIEW + 24);
{}IDM_VIEW_TAB_SPACE = (IDM_VIEW + 25);
{}IDM_VIEW_EOL = (IDM_VIEW + 26);
{}IDM_VIEW_EDGELINE = (IDM_VIEW + 27);
{}IDM_VIEW_EDGEBACKGROUND = (IDM_VIEW + 28);
{}IDM_VIEW_TOGGLE_UNFOLDALL = (IDM_VIEW + 29);
{}IDM_VIEW_FOLD_CURRENT = (IDM_VIEW + 30);
{}IDM_VIEW_UNFOLD_CURRENT = (IDM_VIEW + 31);
{}IDM_VIEW_FULLSCREENTOGGLE = (IDM_VIEW + 32);
{}IDM_VIEW_ZOOMRESTORE = (IDM_VIEW + 33);
{}IDM_VIEW_ALWAYSONTOP = (IDM_VIEW + 34);
{}IDM_VIEW_SYNSCROLLV = (IDM_VIEW + 35);
{}IDM_VIEW_SYNSCROLLH = (IDM_VIEW + 36);
{}IDM_VIEW_EDGENONE = (IDM_VIEW + 37);
{}IDM_VIEW_DRAWTABBAR_CLOSEBOTTUN = (IDM_VIEW + 38);
{}IDM_VIEW_DRAWTABBAR_DBCLK2CLOSE = (IDM_VIEW + 39);
{}IDM_VIEW_REFRESHTABAR = (IDM_VIEW + 40);
{}IDM_VIEW_WRAP_SYMBOL = (IDM_VIEW + 41);

{}IDM_VIEW_FOLD = (IDM_VIEW + 50);
{}IDM_VIEW_FOLD_1 = (IDM_VIEW_FOLD + 1);
{}IDM_VIEW_FOLD_2 = (IDM_VIEW_FOLD + 2);
{}IDM_VIEW_FOLD_3 = (IDM_VIEW_FOLD + 3);
{}IDM_VIEW_FOLD_4 = (IDM_VIEW_FOLD + 4);
{}IDM_VIEW_FOLD_5 = (IDM_VIEW_FOLD + 5);
{}IDM_VIEW_FOLD_6 = (IDM_VIEW_FOLD + 6);
{}IDM_VIEW_FOLD_7 = (IDM_VIEW_FOLD + 7);
{}IDM_VIEW_FOLD_8 = (IDM_VIEW_FOLD + 8);

{}IDM_VIEW_UNFOLD = (IDM_VIEW + 60);
{}IDM_VIEW_UNFOLD_1 = (IDM_VIEW_UNFOLD + 1);
{}IDM_VIEW_UNFOLD_2 = (IDM_VIEW_UNFOLD + 2);
{}IDM_VIEW_UNFOLD_3 = (IDM_VIEW_UNFOLD + 3);
{}IDM_VIEW_UNFOLD_4 = (IDM_VIEW_UNFOLD + 4);
{}IDM_VIEW_UNFOLD_5 = (IDM_VIEW_UNFOLD + 5);
{}IDM_VIEW_UNFOLD_6 = (IDM_VIEW_UNFOLD + 6);
{}IDM_VIEW_UNFOLD_7 = (IDM_VIEW_UNFOLD + 7);
{}IDM_VIEW_UNFOLD_8 = (IDM_VIEW_UNFOLD + 8);

{}IDM_VIEW_GOTO_ANOTHER_VIEW = 10001;
{}IDM_VIEW_CLONE_TO_ANOTHER_VIEW = 10002;

{}IDM_FORMAT = (IDM + 5000);
{}IDM_FORMAT_TODOS = (IDM_FORMAT + 1);
{}IDM_FORMAT_TOUNIX = (IDM_FORMAT + 2);
{}IDM_FORMAT_TOMAC = (IDM_FORMAT + 3);
{}IDM_FORMAT_ANSI = (IDM_FORMAT + 4);
{}IDM_FORMAT_UTF_8 = (IDM_FORMAT + 5);
{}IDM_FORMAT_UCS_2BE = (IDM_FORMAT + 6);
{}IDM_FORMAT_UCS_2LE = (IDM_FORMAT + 7);
{}IDM_FORMAT_AS_UTF_8 = (IDM_FORMAT + 8);

{}IDM_LANG = (IDM + 6000);
{}IDM_LANGSTYLE_CONFIG_DLG = (IDM_LANG + 1);
{}IDM_LANG_C = (IDM_LANG + 2);
{}IDM_LANG_CPP = (IDM_LANG + 3);
{}IDM_LANG_JAVA = (IDM_LANG + 4);
{}IDM_LANG_HTML = (IDM_LANG + 5);
{}IDM_LANG_XML = (IDM_LANG + 6);
{}IDM_LANG_JS = (IDM_LANG + 7);
{}IDM_LANG_PHP = (IDM_LANG + 8);
{}IDM_LANG_ASP = (IDM_LANG + 9);
{}IDM_LANG_CSS = (IDM_LANG + 10);
{}IDM_LANG_PASCAL = (IDM_LANG + 11);
{}IDM_LANG_PYTHON = (IDM_LANG + 12);
{}IDM_LANG_PERL = (IDM_LANG + 13);
{}IDM_LANG_OBJC = (IDM_LANG + 14);
{}IDM_LANG_ASCII = (IDM_LANG + 15);
{}IDM_LANG_TEXT = (IDM_LANG + 16);
{}IDM_LANG_RC = (IDM_LANG + 17);
{}IDM_LANG_MAKEFILE = (IDM_LANG + 18);
{}IDM_LANG_INI = (IDM_LANG + 19);
{}IDM_LANG_SQL = (IDM_LANG + 20);
{}IDM_LANG_VB = (IDM_LANG + 21);
{}IDM_LANG_BATCH = (IDM_LANG + 22);
{}IDM_LANG_CS = (IDM_LANG + 23);
{}IDM_LANG_LUA = (IDM_LANG + 24);
{}IDM_LANG_TEX = (IDM_LANG + 25);
{}IDM_LANG_FORTRAN = (IDM_LANG + 26);
{}IDM_LANG_SH = (IDM_LANG + 27);
{}IDM_LANG_FLASH = (IDM_LANG + 28);
{}IDM_LANG_NSIS = (IDM_LANG + 29);
{}IDM_LANG_TCL = (IDM_LANG + 30);
{}IDM_LANG_LISP = (IDM_LANG + 31);
{}IDM_LANG_SCHEME = (IDM_LANG + 32);
{}IDM_LANG_ASM = (IDM_LANG + 33);
{}IDM_LANG_DIFF = (IDM_LANG + 34);
{}IDM_LANG_PROPS = (IDM_LANG + 35);
{}IDM_LANG_PS = (IDM_LANG + 36);
{}IDM_LANG_RUBY = (IDM_LANG + 37);
{}IDM_LANG_SMALLTALK = (IDM_LANG + 38);
{}IDM_LANG_VHDL = (IDM_LANG + 39);
{}IDM_LANG_CAML = (IDM_LANG + 40);
{}IDM_LANG_KIX = (IDM_LANG + 41);
{}IDM_LANG_ADA = (IDM_LANG + 42);
{}IDM_LANG_VERILOG = (IDM_LANG + 43);
{}IDM_LANG_AU3 = (IDM_LANG + 44);
{}IDM_LANG_MATLAB = (IDM_LANG + 45);
{}IDM_LANG_HASKELL = (IDM_LANG + 46);
{}IDM_LANG_INNO = (IDM_LANG + 47);
{}IDM_LANG_CMAKE = (IDM_LANG + 48);
{}IDM_LANG_USER = (IDM_LANG + 50); {//46050}
{}IDM_LANG_USER_LIMIT = (IDM_LANG + 80); {//46080}

{}IDM_ABOUT = (IDM + 7000);
{}IDM_HOMESWEETHOME = (IDM_ABOUT + 1);
{}IDM_PROJECTPAGE = (IDM_ABOUT + 2);
{}IDM_ONLINEHELP = (IDM_ABOUT + 3);
{}IDM_FORUM = (IDM_ABOUT + 4);
{}IDM_PLUGINSHOME = (IDM_ABOUT + 5);

{}IDM_SETTING = (IDM + 8000);
{}IDM_SETTING_TAB_SIZE = (IDM_SETTING + 1);
{}IDM_SETTING_TAB_REPLCESPACE = (IDM_SETTING + 2);
{}IDM_SETTING_HISTORY_SIZE = (IDM_SETTING + 3);
{}IDM_SETTING_EDGE_SIZE = (IDM_SETTING + 4);
{}IDM_SETTING_FILEASSOCIATION_DLG = (IDM_SETTING + 5);
{}IDM_SETTING_FILE_AUTODETECTION = (IDM_SETTING + 6);
{}IDM_SETTING_HISTORY_DONT_CHECK = (IDM_SETTING + 7);
{}IDM_SETTING_TRAYICON = (IDM_SETTING + 8);
{}IDM_SETTING_SHORTCUT_MAPPER = (IDM_SETTING + 9);
{}IDM_SETTING_REMEMBER_LAST_SESSION = (IDM_SETTING + 10);
{}IDM_SETTING_PREFERECE = (IDM_SETTING + 11);
{}IDM_SETTING_FILE_AUTODETECTION_ENABLE = (IDM_SETTING + 12);
{}IDM_SETTING_FILE_AUTODETECTION_DISABLE = (IDM_SETTING + 13);
{}IDM_SETTING_FILE_AUTODETECTION_ENABLESILENTLY = (IDM_SETTING + 14);

{}IDM_MACRO_STARTRECORDINGMACRO = (IDM_EDIT + 18);
{}IDM_MACRO_STOPRECORDINGMACRO = (IDM_EDIT + 19);
{}IDM_MACRO_PLAYBACKRECORDEDMACRO = (IDM_EDIT + 21);
{}IDM_MACRO_SAVECURRENTMACRO = (IDM_EDIT + 25);
{}IDM_MACRO_RUNMULTIMACRODLG = (IDM_EDIT+32);

{}IDM_EXECUTE = (IDM + 9000);

  { Constants for messages regarding Scintilla Core }
  // refer http://scintilla.sourceforge.net/ScintillaDoc.html
{}INVALID_POSITION = -1;
{}SCI_START = 2000;
{}SCI_OPTIONAL_START = 3000;
{}SCI_LEXER_START = 4000;
{}SCI_ADDTEXT = 2001;
{}SCI_ADDSTYLEDTEXT = 2002;
{}SCI_INSERTTEXT = 2003;
{}SCI_CLEARALL = 2004;
{}SCI_CLEARDOCUMENTSTYLE = 2005;
{}SCI_GETLENGTH = 2006;
{}SCI_GETCHARAT = 2007;
{}SCI_GETCURRENTPOS = 2008;
{}SCI_GETANCHOR = 2009;
{}SCI_GETSTYLEAT = 2010;
{}SCI_REDO = 2011;
{}SCI_SETUNDOCOLLECTION = 2012;
{}SCI_SELECTALL = 2013;
{}SCI_SETSAVEPOINT = 2014;
{}SCI_GETSTYLEDTEXT = 2015;
{}SCI_CANREDO = 2016;
{}SCI_MARKERLINEFROMHANDLE = 2017;
{}SCI_MARKERDELETEHANDLE = 2018;
{}SCI_GETUNDOCOLLECTION = 2019;
{}SCWS_INVISIBLE = 0;
{}SCWS_VISIBLEALWAYS = 1;
{}SCWS_VISIBLEAFTERINDENT = 2;
{}SCI_GETVIEWWS = 2020;
{}SCI_SETVIEWWS = 2021;
{}SCI_POSITIONFROMPOINT = 2022;
{}SCI_POSITIONFROMPOINTCLOSE = 2023;
{}SCI_GOTOLINE = 2024;
{}SCI_GOTOPOS = 2025;
{}SCI_SETANCHOR = 2026;
{}SCI_GETCURLINE = 2027;
{}SCI_GETENDSTYLED = 2028;
{}SC_EOL_CRLF = 0;
{}SC_EOL_CR = 1;
{}SC_EOL_LF = 2;
{}SCI_CONVERTEOLS = 2029;
{}SCI_GETEOLMODE = 2030;
{}SCI_SETEOLMODE = 2031;
{}SCI_STARTSTYLING = 2032;
{}SCI_SETSTYLING = 2033;
{}SCI_GETBUFFEREDDRAW = 2034;
{}SCI_SETBUFFEREDDRAW = 2035;
{}SCI_SETTABWIDTH = 2036;
{}SCI_GETTABWIDTH = 2121;
{}SC_CP_UTF8 = 65001;
{}SC_CP_DBCS = 1;
{}SCI_SETCODEPAGE = 2037;
{}SCI_SETUSEPALETTE = 2039;
{}MARKER_MAX = 31;
{}SC_MARK_CIRCLE = 0;
{}SC_MARK_ROUNDRECT = 1;
{}SC_MARK_ARROW = 2;
{}SC_MARK_SMALLRECT = 3;
{}SC_MARK_SHORTARROW = 4;
{}SC_MARK_EMPTY = 5;
{}SC_MARK_ARROWDOWN = 6;
{}SC_MARK_MINUS = 7;
{}SC_MARK_PLUS = 8;
{}SC_MARK_VLINE = 9;
{}SC_MARK_LCORNER = 10;
{}SC_MARK_TCORNER = 11;
{}SC_MARK_BOXPLUS = 12;
{}SC_MARK_BOXPLUSCONNECTED = 13;
{}SC_MARK_BOXMINUS = 14;
{}SC_MARK_BOXMINUSCONNECTED = 15;
{}SC_MARK_LCORNERCURVE = 16;
{}SC_MARK_TCORNERCURVE = 17;
{}SC_MARK_CIRCLEPLUS = 18;
{}SC_MARK_CIRCLEPLUSCONNECTED = 19;
{}SC_MARK_CIRCLEMINUS = 20;
{}SC_MARK_CIRCLEMINUSCONNECTED = 21;
{}SC_MARK_BACKGROUND = 22;
{}SC_MARK_DOTDOTDOT = 23;
{}SC_MARK_ARROWS = 24;
{}SC_MARK_PIXMAP = 25;
{}SC_MARK_CHARACTER = 10000;
{}SC_MARKNUM_FOLDEREND = 25;
{}SC_MARKNUM_FOLDEROPENMID = 26;
{}SC_MARKNUM_FOLDERMIDTAIL = 27;
{}SC_MARKNUM_FOLDERTAIL = 28;
{}SC_MARKNUM_FOLDERSUB = 29;
{}SC_MARKNUM_FOLDER = 30;
{}SC_MARKNUM_FOLDEROPEN = 31;
{}SC_MASK_FOLDERS = $FE000000;
{}SCI_MARKERDEFINE = 2040;
{}SCI_MARKERSETFORE = 2041;
{}SCI_MARKERSETBACK = 2042;
{}SCI_MARKERADD = 2043;
{}SCI_MARKERDELETE = 2044;
{}SCI_MARKERDELETEALL = 2045;
{}SCI_MARKERGET = 2046;
{}SCI_MARKERNEXT = 2047;
{}SCI_MARKERPREVIOUS = 2048;
{}SCI_MARKERDEFINEPIXMAP = 2049;
{}SC_MARGIN_SYMBOL = 0;
{}SC_MARGIN_NUMBER = 1;
{}SCI_SETMARGINTYPEN = 2240;
{}SCI_GETMARGINTYPEN = 2241;
{}SCI_SETMARGINWIDTHN = 2242;
{}SCI_GETMARGINWIDTHN = 2243;
{}SCI_SETMARGINMASKN = 2244;
{}SCI_GETMARGINMASKN = 2245;
{}SCI_SETMARGINSENSITIVEN = 2246;
{}SCI_GETMARGINSENSITIVEN = 2247;
{}STYLE_DEFAULT = 32;
{}STYLE_LINENUMBER = 33;
{}STYLE_BRACELIGHT = 34;
{}STYLE_BRACEBAD = 35;
{}STYLE_CONTROLCHAR = 36;
{}STYLE_INDENTGUIDE = 37;
{}STYLE_LASTPREDEFINED = 39;
{}STYLE_MAX = 127;
{}SC_CHARSET_ANSI = 0;
{}SC_CHARSET_DEFAULT = 1;
{}SC_CHARSET_BALTIC = 186;
{}SC_CHARSET_CHINESEBIG5 = 136;
{}SC_CHARSET_EASTEUROPE = 238;
{}SC_CHARSET_GB2312 = 134;
{}SC_CHARSET_GREEK = 161;
{}SC_CHARSET_HANGUL = 129;
{}SC_CHARSET_MAC = 77;
{}SC_CHARSET_OEM = 255;
{}SC_CHARSET_RUSSIAN = 204;
{}SC_CHARSET_SHIFTJIS = 128;
{}SC_CHARSET_SYMBOL = 2;
{}SC_CHARSET_TURKISH = 162;
{}SC_CHARSET_JOHAB = 130;
{}SC_CHARSET_HEBREW = 177;
{}SC_CHARSET_ARABIC = 178;
{}SC_CHARSET_VIETNAMESE = 163;
{}SC_CHARSET_THAI = 222;
{}SCI_STYLECLEARALL = 2050;
{}SCI_STYLESETFORE = 2051;
{}SCI_STYLESETBACK = 2052;
{}SCI_STYLESETBOLD = 2053;
{}SCI_STYLESETITALIC = 2054;
{}SCI_STYLESETSIZE = 2055;
{}SCI_STYLESETFONT = 2056;
{}SCI_STYLESETEOLFILLED = 2057;
{}SCI_STYLERESETDEFAULT = 2058;
{}SCI_STYLESETUNDERLINE = 2059;
{}SC_CASE_MIXED = 0;
{}SC_CASE_UPPER = 1;
{}SC_CASE_LOWER = 2;
{}SCI_STYLESETCASE = 2060;
{}SCI_STYLESETCHARACTERSET = 2066;
{}SCI_STYLESETHOTSPOT = 2409;
{}SCI_SETSELFORE = 2067;
{}SCI_SETSELBACK = 2068;
{}SCI_SETCARETFORE = 2069;
{}SCI_ASSIGNCMDKEY = 2070;
{}SCI_CLEARCMDKEY = 2071;
{}SCI_CLEARALLCMDKEYS = 2072;
{}SCI_SETSTYLINGEX = 2073;
{}SCI_STYLESETVISIBLE = 2074;
{}SCI_GETCARETPERIOD = 2075;
{}SCI_SETCARETPERIOD = 2076;
{}SCI_SETWORDCHARS = 2077;
{}SCI_BEGINUNDOACTION = 2078;
{}SCI_ENDUNDOACTION = 2079;
{}INDIC_MAX = 7;
{}INDIC_PLAIN = 0;
{}INDIC_SQUIGGLE = 1;
{}INDIC_TT = 2;
{}INDIC_DIAGONAL = 3;
{}INDIC_STRIKE = 4;
{}INDIC_HIDDEN = 5;
{}INDIC_BOX = 6;
{}INDIC0_MASK = $20;
{}INDIC1_MASK = $40;
{}INDIC2_MASK = $80;
{}INDICS_MASK = $E0;
{}SCI_INDICSETSTYLE = 2080;
{}SCI_INDICGETSTYLE = 2081;
{}SCI_INDICSETFORE = 2082;
{}SCI_INDICGETFORE = 2083;
{}SCI_SETWHITESPACEFORE = 2084;
{}SCI_SETWHITESPACEBACK = 2085;
{}SCI_SETSTYLEBITS = 2090;
{}SCI_GETSTYLEBITS = 2091;
{}SCI_SETLINESTATE = 2092;
{}SCI_GETLINESTATE = 2093;
{}SCI_GETMAXLINESTATE = 2094;
{}SCI_GETCARETLINEVISIBLE = 2095;
{}SCI_SETCARETLINEVISIBLE = 2096;
{}SCI_GETCARETLINEBACK = 2097;
{}SCI_SETCARETLINEBACK = 2098;
{}SCI_STYLESETCHANGEABLE = 2099;
{}SCI_AUTOCSHOW = 2100;
{}SCI_AUTOCCANCEL = 2101;
{}SCI_AUTOCACTIVE = 2102;
{}SCI_AUTOCPOSSTART = 2103;
{}SCI_AUTOCCOMPLETE = 2104;
{}SCI_AUTOCSTOPS = 2105;
{}SCI_AUTOCSETSEPARATOR = 2106;
{}SCI_AUTOCGETSEPARATOR = 2107;
{}SCI_AUTOCSELECT = 2108;
{}SCI_AUTOCSETCANCELATSTART = 2110;
{}SCI_AUTOCGETCANCELATSTART = 2111;
{}SCI_AUTOCSETFILLUPS = 2112;
{}SCI_AUTOCSETCHOOSESINGLE = 2113;
{}SCI_AUTOCGETCHOOSESINGLE = 2114;
{}SCI_AUTOCSETIGNORECASE = 2115;
{}SCI_AUTOCGETIGNORECASE = 2116;
{}SCI_USERLISTSHOW = 2117;
{}SCI_AUTOCSETAUTOHIDE = 2118;
{}SCI_AUTOCGETAUTOHIDE = 2119;
{}SCI_AUTOCSETDROPRESTOFWORD = 2270;
{}SCI_AUTOCGETDROPRESTOFWORD = 2271;
{}SCI_REGISTERIMAGE = 2405;
{}SCI_CLEARREGISTEREDIMAGES = 2408;
{}SCI_AUTOCGETTYPESEPARATOR = 2285;
{}SCI_AUTOCSETTYPESEPARATOR = 2286;
{}SCI_SETINDENT = 2122;
{}SCI_GETINDENT = 2123;
{}SCI_SETUSETABS = 2124;
{}SCI_GETUSETABS = 2125;
{}SCI_SETLINEINDENTATION = 2126;
{}SCI_GETLINEINDENTATION = 2127;
{}SCI_GETLINEINDENTPOSITION = 2128;
{}SCI_GETCOLUMN = 2129;
{}SCI_SETHSCROLLBAR = 2130;
{}SCI_GETHSCROLLBAR = 2131;
{}SCI_SETINDENTATIONGUIDES = 2132;
{}SCI_GETINDENTATIONGUIDES = 2133;
{}SCI_SETHIGHLIGHTGUIDE = 2134;
{}SCI_GETHIGHLIGHTGUIDE = 2135;
{}SCI_GETLINEENDPOSITION = 2136;
{}SCI_GETCODEPAGE = 2137;
{}SCI_GETCARETFORE = 2138;
{}SCI_GETUSEPALETTE = 2139;
{}SCI_GETREADONLY = 2140;
{}SCI_SETCURRENTPOS = 2141;
  SCI_SETSELECTIONSTART = 2142;
  SCI_GETSELECTIONSTART = 2143;
  SCI_SETSELECTIONEND = 2144;
  SCI_GETSELECTIONEND = 2145;
{}SCI_SETPRINTMAGNIFICATION = 2146;
{}SCI_GETPRINTMAGNIFICATION = 2147;
{}SC_PRINT_NORMAL = 0;
{}SC_PRINT_INVERTLIGHT = 1;
{}SC_PRINT_BLACKONWHITE = 2;
{}SC_PRINT_COLOURONWHITE = 3;
{}SC_PRINT_COLOURONWHITEDEFAULTBG = 4;
{}SCI_SETPRINTCOLOURMODE = 2148;
{}SCI_GETPRINTCOLOURMODE = 2149;
{}SCFIND_WHOLEWORD = 2;
{}SCFIND_MATCHCASE = 4;
{}SCFIND_WORDSTART = $00100000;
{}SCFIND_REGEXP = $00200000;
{}SCFIND_POSIX = $00400000;
{}SCI_FINDTEXT = 2150;
{}SCI_FORMATRANGE = 2151;
{}SCI_GETFIRSTVISIBLELINE = 2152;
{}SCI_GETLINE = 2153;
{}SCI_GETLINECOUNT = 2154;
{}SCI_SETMARGINLEFT = 2155;
{}SCI_GETMARGINLEFT = 2156;
{}SCI_SETMARGINRIGHT = 2157;
{}SCI_GETMARGINRIGHT = 2158;
{}SCI_GETMODIFY = 2159;
{}SCI_SETSEL = 2160;
  SCI_GETSELTEXT = 2161;
{}SCI_GETTEXTRANGE = 2162;
{}SCI_HIDESELECTION = 2163;
{}SCI_POINTXFROMPOSITION = 2164;
{}SCI_POINTYFROMPOSITION = 2165;
{}SCI_LINEFROMPOSITION = 2166;
{}SCI_POSITIONFROMLINE = 2167;
{}SCI_LINESCROLL = 2168;
{}SCI_SCROLLCARET = 2169;
{}SCI_REPLACESEL = 2170;
{}SCI_SETREADONLY = 2171;
{}SCI_NULL = 2172;
{}SCI_CANPASTE = 2173;
{}SCI_CANUNDO = 2174;
{}SCI_EMPTYUNDOBUFFER = 2175;
{}SCI_UNDO = 2176;
{}SCI_CUT = 2177;
{}SCI_COPY = 2178;
{}SCI_PASTE = 2179;
{}SCI_CLEAR = 2180;
{}SCI_SETTEXT = 2181;
  SCI_GETTEXT = 2182;
  SCI_GETTEXTLENGTH = 2183;
{}SCI_GETDIRECTFUNCTION = 2184;
{}SCI_GETDIRECTPOINTER = 2185;
{}SCI_SETOVERTYPE = 2186;
{}SCI_GETOVERTYPE = 2187;
{}SCI_SETCARETWIDTH = 2188;
{}SCI_GETCARETWIDTH = 2189;
{}SCI_SETTARGETSTART = 2190;
{}SCI_GETTARGETSTART = 2191;
{}SCI_SETTARGETEND = 2192;
{}SCI_GETTARGETEND = 2193;
{}SCI_REPLACETARGET = 2194;
{}SCI_REPLACETARGETRE = 2195;
{}SCI_SEARCHINTARGET = 2197;
{}SCI_SETSEARCHFLAGS = 2198;
{}SCI_GETSEARCHFLAGS = 2199;
 SCI_CALLTIPSHOW = 2200;
 SCI_CALLTIPSETPOSITION = 2213;
{}SCI_CALLTIPCANCEL = 2201;
  SCI_CALLTIPACTIVE = 2202;
{}SCI_CALLTIPPOSSTART = 2203;
  SCI_CALLTIPSETHLT = 2204;
{}SCI_CALLTIPSETBACK = 2205;
{}SCI_CALLTIPSETFORE = 2206;
{}SCI_CALLTIPSETFOREHLT = 2207;
{}SCI_VISIBLEFROMDOCLINE = 2220;
{}SCI_DOCLINEFROMVISIBLE = 2221;
{}SC_FOLDLEVELBASE = $400;
{}SC_FOLDLEVELWHITEFLAG = $1000;
{}SC_FOLDLEVELHEADERFLAG = $2000;
{}SC_FOLDLEVELBOXHEADERFLAG = $4000;
{}SC_FOLDLEVELBOXFOOTERFLAG = $8000;
{}SC_FOLDLEVELCONTRACTED = $10000;
{}SC_FOLDLEVELUNINDENT = $20000;
{}SC_FOLDLEVELNUMBERMASK = $0FF;
{}SCI_SETFOLDLEVEL = 2222;
{}SCI_GETFOLDLEVEL = 2223;
{}SCI_GETLASTCHILD = 2224;
{}SCI_GETFOLDPARENT = 2225;
{}SCI_SHOWLINES = 2226;
{}SCI_HIDELINES = 2227;
{}SCI_GETLINEVISIBLE = 2228;
{}SCI_SETFOLDEXPANDED = 2229;
{}SCI_GETFOLDEXPANDED = 2230;
{}SCI_TOGGLEFOLD = 2231;
{}SCI_ENSUREVISIBLE = 2232;
{}SC_FOLDFLAG_LINEBEFORE_EXPANDED = $0002;
{}SC_FOLDFLAG_LINEBEFORE_CONTRACTED = $0004;
{}SC_FOLDFLAG_LINEAFTER_EXPANDED = $0008;
{}SC_FOLDFLAG_LINEAFTER_CONTRACTED = $0010;
{}SC_FOLDFLAG_LEVELNUMBERS = $0040;
{}SC_FOLDFLAG_BOX = $0001;
{}SCI_SETFOLDFLAGS = 2233;
{}SCI_ENSUREVISIBLEENFORCEPOLICY = 2234;
{}SCI_SETTABINDENTS = 2260;
{}SCI_GETTABINDENTS = 2261;
{}SCI_SETBACKSPACEUNINDENTS = 2262;
{}SCI_GETBACKSPACEUNINDENTS = 2263;
{}SC_TIME_FOREVER = 10000000;
{}SCI_SETMOUSEDWELLTIME = 2264;
{}SCI_GETMOUSEDWELLTIME = 2265;
{}SCI_WORDSTARTPOSITION = 2266;
{}SCI_WORDENDPOSITION = 2267;
{}SC_WRAP_NONE = 0;
{}SC_WRAP_WORD = 1;
{}SCI_SETWRAPMODE = 2268;
{}SCI_GETWRAPMODE = 2269;
{}SC_WRAPVISUALFLAG_NONE = $0000;
{}SC_WRAPVISUALFLAG_END = $0001;
{}SC_WRAPVISUALFLAG_START = $0002;
{}SCI_SETWRAPVISUALFLAGS = 2460;
{}SCI_GETWRAPVISUALFLAGS = 2461;
{}SC_WRAPVISUALFLAGLOC_DEFAULT = $0000;
{}SC_WRAPVISUALFLAGLOC_END_BY_TEXT = $0001;
{}SC_WRAPVISUALFLAGLOC_START_BY_TEXT = $0002;
{}SCI_SETWRAPVISUALFLAGSLOCATION = 2462;
{}SCI_GETWRAPVISUALFLAGSLOCATION = 2463;
{}SCI_SETWRAPSTARTINDENT = 2464;
{}SCI_GETWRAPSTARTINDENT = 2465;
{}SC_CACHE_NONE = 0;
{}SC_CACHE_CARET = 1;
{}SC_CACHE_PAGE = 2;
{}SC_CACHE_DOCUMENT = 3;
{}SCI_SETLAYOUTCACHE = 2272;
{}SCI_GETLAYOUTCACHE = 2273;
{}SCI_SETSCROLLWIDTH = 2274;
{}SCI_GETSCROLLWIDTH = 2275;
{}SCI_TEXTWIDTH = 2276;
{}SCI_SETENDATLASTLINE = 2277;
{}SCI_GETENDATLASTLINE = 2278;
{}SCI_TEXTHEIGHT = 2279;
{}SCI_SETVSCROLLBAR = 2280;
{}SCI_GETVSCROLLBAR = 2281;
{}SCI_APPENDTEXT = 2282;
{}SCI_GETTWOPHASEDRAW = 2283;
{}SCI_SETTWOPHASEDRAW = 2284;
{}SCI_TARGETFROMSELECTION = 2287;
{}SCI_LINESJOIN = 2288;
{}SCI_LINESSPLIT = 2289;
{}SCI_SETFOLDMARGINCOLOUR = 2290;
{}SCI_SETFOLDMARGINHICOLOUR = 2291;
{}SCI_LINEDOWN = 2300;
{}SCI_LINEDOWNEXTEND = 2301;
{}SCI_LINEUP = 2302;
{}SCI_LINEUPEXTEND = 2303;
{}SCI_CHARLEFT = 2304;
{}SCI_CHARLEFTEXTEND = 2305;
{}SCI_CHARRIGHT = 2306;
{}SCI_CHARRIGHTEXTEND = 2307;
{}SCI_WORDLEFT = 2308;
{}SCI_WORDLEFTEXTEND = 2309;
{}SCI_WORDRIGHT = 2310;
{}SCI_WORDRIGHTEXTEND = 2311;
{}SCI_HOME = 2312;
{}SCI_HOMEEXTEND = 2313;
{}SCI_LINEEND = 2314;
{}SCI_LINEENDEXTEND = 2315;
{}SCI_DOCUMENTSTART = 2316;
{}SCI_DOCUMENTSTARTEXTEND = 2317;
{}SCI_DOCUMENTEND = 2318;
{}SCI_DOCUMENTENDEXTEND = 2319;
{}SCI_PAGEUP = 2320;
{}SCI_PAGEUPEXTEND = 2321;
{}SCI_PAGEDOWN = 2322;
{}SCI_PAGEDOWNEXTEND = 2323;
{}SCI_EDITTOGGLEOVERTYPE = 2324;
{}SCI_CANCEL = 2325;
{}SCI_DELETEBACK = 2326;
{}SCI_TAB = 2327;
{}SCI_BACKTAB = 2328;
{}SCI_NEWLINE = 2329;
{}SCI_FORMFEED = 2330;
{}SCI_VCHOME = 2331;
{}SCI_VCHOMEEXTEND = 2332;
{}SCI_ZOOMIN = 2333;
{}SCI_ZOOMOUT = 2334;
{}SCI_DELWORDLEFT = 2335;
{}SCI_DELWORDRIGHT = 2336;
{}SCI_LINECUT = 2337;
{}SCI_LINEDELETE = 2338;
{}SCI_LINETRANSPOSE = 2339;
{}SCI_LINEDUPLICATE = 2404;
{}SCI_LOWERCASE = 2340;
{}SCI_UPPERCASE = 2341;
{}SCI_LINESCROLLDOWN = 2342;
{}SCI_LINESCROLLUP = 2343;
{}SCI_DELETEBACKNOTLINE = 2344;
{}SCI_HOMEDISPLAY = 2345;
{}SCI_HOMEDISPLAYEXTEND = 2346;
{}SCI_LINEENDDISPLAY = 2347;
{}SCI_LINEENDDISPLAYEXTEND = 2348;
{}SCI_HOMEWRAP = 2349;
{}SCI_HOMEWRAPEXTEND = 2450;
{}SCI_LINEENDWRAP = 2451;
{}SCI_LINEENDWRAPEXTEND = 2452;
{}SCI_VCHOMEWRAP = 2453;
{}SCI_VCHOMEWRAPEXTEND = 2454;
{}SCI_LINECOPY = 2455;
{}SCI_MOVECARETINSIDEVIEW = 2401;
{}SCI_LINELENGTH = 2350;
{}SCI_BRACEHIGHLIGHT = 2351;
{}SCI_BRACEBADLIGHT = 2352;
{}SCI_BRACEMATCH = 2353;
{}SCI_GETVIEWEOL = 2355;
{}SCI_SETVIEWEOL = 2356;
{}SCI_GETDOCPOINTER = 2357;
{}SCI_SETDOCPOINTER = 2358;
{}SCI_SETMODEVENTMASK = 2359;
{}EDGE_NONE = 0;
{}EDGE_LINE = 1;
{}EDGE_BACKGROUND = 2;
{}SCI_GETEDGECOLUMN = 2360;
{}SCI_SETEDGECOLUMN = 2361;
{}SCI_GETEDGEMODE = 2362;
{}SCI_SETEDGEMODE = 2363;
{}SCI_GETEDGECOLOUR = 2364;
{}SCI_SETEDGECOLOUR = 2365;
{}SCI_SEARCHANCHOR = 2366;
{}SCI_SEARCHNEXT = 2367;
{}SCI_SEARCHPREV = 2368;
{}SCI_LINESONSCREEN = 2370;
{}SCI_USEPOPUP = 2371;
{}SCI_SELECTIONISRECTANGLE = 2372;
{}SCI_SETZOOM = 2373;
{}SCI_GETZOOM = 2374;
{}SCI_CREATEDOCUMENT = 2375;
{}SCI_ADDREFDOCUMENT = 2376;
{}SCI_RELEASEDOCUMENT = 2377;
{}SCI_GETMODEVENTMASK = 2378;
{}SCI_SETFOCUS = 2380;
{}SCI_GETFOCUS = 2381;
{}SCI_SETSTATUS = 2382;
{}SCI_GETSTATUS = 2383;
{}SCI_SETMOUSEDOWNCAPTURES = 2384;
{}SCI_GETMOUSEDOWNCAPTURES = 2385;
{}SC_CURSORNORMAL = -1;
{}SC_CURSORWAIT = 4;
{}SCI_SETCURSOR = 2386;
{}SCI_GETCURSOR = 2387;
{}SCI_SETCONTROLCHARSYMBOL = 2388;
{}SCI_GETCONTROLCHARSYMBOL = 2389;
{}SCI_WORDPARTLEFT = 2390;
{}SCI_WORDPARTLEFTEXTEND = 2391;
{}SCI_WORDPARTRIGHT = 2392;
{}SCI_WORDPARTRIGHTEXTEND = 2393;
{}VISIBLE_SLOP = $01;
{}VISIBLE_STRICT = $04;
{}SCI_SETVISIBLEPOLICY = 2394;
{}SCI_DELLINELEFT = 2395;
{}SCI_DELLINERIGHT = 2396;
{}SCI_SETXOFFSET = 2397;
{}SCI_GETXOFFSET = 2398;
{}SCI_CHOOSECARETX = 2399;
{}SCI_GRABFOCUS = 2400;
{}CARET_SLOP = $01;
{}CARET_STRICT = $04;
{}CARET_JUMPS = $10;
{}CARET_EVEN = $08;
{}SCI_SETXCARETPOLICY = 2402;
{}SCI_SETYCARETPOLICY = 2403;
{}SCI_SETPRINTWRAPMODE = 2406;
{}SCI_GETPRINTWRAPMODE = 2407;
{}SCI_SETHOTSPOTACTIVEFORE = 2410;
{}SCI_SETHOTSPOTACTIVEBACK = 2411;
{}SCI_SETHOTSPOTACTIVEUNDERLINE = 2412;
{}SCI_SETHOTSPOTSINGLELINE = 2421;
{}SCI_PARADOWN = 2413;
{}SCI_PARADOWNEXTEND = 2414;
{}SCI_PARAUP = 2415;
{}SCI_PARAUPEXTEND = 2416;
{}SCI_POSITIONBEFORE = 2417;
{}SCI_POSITIONAFTER = 2418;
{}SCI_COPYRANGE = 2419;
{}SCI_COPYTEXT = 2420;
{}SC_SEL_STREAM = 0;
{}SC_SEL_RECTANGLE = 1;
{}SC_SEL_LINES = 2;
{}SCI_SETSELECTIONMODE = 2422;
{}SCI_GETSELECTIONMODE = 2423;
{}SCI_GETLINESELSTARTPOSITION = 2424;
{}SCI_GETLINESELENDPOSITION = 2425;
{}SCI_LINEDOWNRECTEXTEND = 2426;
{}SCI_LINEUPRECTEXTEND = 2427;
{}SCI_CHARLEFTRECTEXTEND = 2428;
{}SCI_CHARRIGHTRECTEXTEND = 2429;
{}SCI_HOMERECTEXTEND = 2430;
{}SCI_VCHOMERECTEXTEND = 2431;
{}SCI_LINEENDRECTEXTEND = 2432;
{}SCI_PAGEUPRECTEXTEND = 2433;
{}SCI_PAGEDOWNRECTEXTEND = 2434;
{}SCI_STUTTEREDPAGEUP = 2435;
{}SCI_STUTTEREDPAGEUPEXTEND = 2436;
{}SCI_STUTTEREDPAGEDOWN = 2437;
{}SCI_STUTTEREDPAGEDOWNEXTEND = 2438;
{}SCI_WORDLEFTEND = 2439;
{}SCI_WORDLEFTENDEXTEND = 2440;
{}SCI_WORDRIGHTEND = 2441;
{}SCI_WORDRIGHTENDEXTEND = 2442;
{}SCI_SETWHITESPACECHARS = 2443;
{}SCI_SETCHARSDEFAULT = 2444;
{}SCI_AUTOCGETCURRENT = 2445;
{}SCI_ALLOCATE = 2446;
{}SCI_STARTRECORD = 3001;
{}SCI_STOPRECORD = 3002;
{}SCI_SETLEXER = 4001;
{}SCI_GETLEXER = 4002;
{}SCI_COLOURISE = 4003;
{}SCI_SETPROPERTY = 4004;
{}KEYWORDSET_MAX = 8;
{}SCI_SETKEYWORDS = 4005;
{}SCI_SETLEXERLANGUAGE = 4006;
{}SCI_LOADLEXERLIBRARY = 4007;
{}SC_MOD_INSERTTEXT = $1;
{}SC_MOD_DELETETEXT = $2;
{}SC_MOD_CHANGESTYLE = $4;
{}SC_MOD_CHANGEFOLD = $8;
{}SC_PERFORMED_USER = $10;
{}SC_PERFORMED_UNDO = $20;
{}SC_PERFORMED_REDO = $40;
{}SC_LASTSTEPINUNDOREDO = $100;
{}SC_MOD_CHANGEMARKER = $200;
{}SC_MOD_BEFOREINSERT = $400;
{}SC_MOD_BEFOREDELETE = $800;
{}SC_MODEVENTMASKALL = $F77;
{}SCEN_CHANGE = 768;
{}SCEN_SETFOCUS = 512;
{}SCEN_KILLFOCUS = 256;
{}SCK_DOWN = 300;
{}SCK_UP = 301;
{}SCK_LEFT = 302;
{}SCK_RIGHT = 303;
{}SCK_HOME = 304;
{}SCK_END = 305;
{}SCK_PRIOR = 306;
{}SCK_NEXT = 307;
{}SCK_DELETE = 308;
{}SCK_INSERT = 309;
{}SCK_ESCAPE = 7;
{}SCK_BACK = 8;
{}SCK_TAB = 9;
{}SCK_RETURN = 13;
{}SCK_ADD = 310;
{}SCK_SUBTRACT = 311;
{}SCK_DIVIDE = 312;
{}SCMOD_SHIFT = 1;
{}SCMOD_CTRL = 2;
{}SCMOD_ALT = 4;
{}SCN_STYLENEEDED = 2000;
  SCN_CHARADDED = 2001;
{}SCN_SAVEPOINTREACHED = 2002;
{}SCN_SAVEPOINTLEFT = 2003;
{}SCN_MODIFYATTEMPTRO = 2004;
{}SCN_KEY = 2005;
{}SCN_DOUBLECLICK = 2006;
{}SCN_UPDATEUI = 2007;
{}SCN_MODIFIED = 2008;
{}SCN_MACRORECORD = 2009;
{}SCN_MARGINCLICK = 2010;
{}SCN_NEEDSHOWN = 2011;
{}SCN_PAINTED = 2013;
{}SCN_USERLISTSELECTION = 2014;
{}SCN_URIDROPPED = 2015;
  SCN_DWELLSTART = 2016;
  SCN_DWELLEND = 2017;
{}SCN_ZOOM = 2018;
{}SCN_HOTSPOTCLICK = 2019;
{}SCN_HOTSPOTDOUBLECLICK = 2020;
{}SCN_CALLTIPCLICK = 2021;
  SC_ORDER_PRESORTED = 0;
  SC_ORDER_PERFORMSORT = 1;
  SC_ORDER_CUSTOM = 2;
  SCI_RGBAIMAGESETWIDTH = 2624;
  SCI_RGBAIMAGESETHEIGHT = 2625;
  SCI_RGBAIMAGESETSCALE = 2651;
  SCI_REGISTERRGBAIMAGE = 2627;
  SCI_AUTOCSETORDER = 2660;
  SCI_AUTOCGETORDER = 2661;
  SC_UPDATE_CONTENT = 1;
  SC_UPDATE_SELECTION = 2;
  SC_UPDATE_V_SCROLL = 4;
  SC_UPDATE_H_SCROLL = 8;

  SCINTILLA_USER = (WM_USER + SCI_START);
  WM_DOOPEN = (SCINTILLA_USER + 8);

(*
  MaxFuncs = 11;

  { Most of this defs are outdated... But there is no consistant N++ doc... }
  NOTEPADPLUS_USER = (WM_USER + 1000);
  NPPM_GETCURRENTSCINTILLA = (NOTEPADPLUS_USER + 4);
  NPPM_GETCURRENTLANGTYPE = (NOTEPADPLUS_USER + 5);
  NPPM_SETCURRENTLANGTYPE = (NOTEPADPLUS_USER + 6);
  NPPM_GETNBOPENFILES = (NOTEPADPLUS_USER + 7);
    ALL_OPEN_FILES = 0;
    PRIMARY_VIEW = 1;
    SECOND_VIEW	= 2;
  NPPM_GETOPENFILENAMES = (NOTEPADPLUS_USER + 8);
  WM_CANCEL_SCINTILLAKEY = (NOTEPADPLUS_USER + 9);
  WM_BIND_SCINTILLAKEY = (NOTEPADPLUS_USER + 10);
  WM_SCINTILLAKEY_MODIFIED = (NOTEPADPLUS_USER + 11);
  NPPM_MODELESSDIALOG = (NOTEPADPLUS_USER + 12);
    MODELESSDIALOGADD = 0;
    MODELESSDIALOGREMOVE = 1;

  NPPM_GETNBSESSIONFILES = (NOTEPADPLUS_USER + 13);
  NPPM_GETSESSIONFILES = (NOTEPADPLUS_USER + 14);
  NPPM_SAVESESSION = (NOTEPADPLUS_USER + 15);
  NPPM_SAVECURRENTSESSION  =(NOTEPADPLUS_USER + 16);  // see TSessionInfo
  NPPM_GETOPENFILENAMESPRIMARY = (NOTEPADPLUS_USER + 17);
  NPPM_GETOPENFILENAMESSECOND = (NOTEPADPLUS_USER + 18);
  WM_GETPARENTOF = (NOTEPADPLUS_USER + 19);
  NPPM_CREATESCINTILLAHANDLE = (NOTEPADPLUS_USER + 20);
  NPPM_DESTROYSCINTILLAHANDLE = (NOTEPADPLUS_USER + 21);
  NPPM_GETNBUSERLANG = (NOTEPADPLUS_USER + 22);
  NPPM_GETCURRENTDOCINDEX = (NOTEPADPLUS_USER + 23);
    MAIN_VIEW = 0;
    SUB_VIEW = 1;

  NPPM_SETSTATUSBAR = (NOTEPADPLUS_USER + 24);
    STATUSBAR_DOC_TYPE = 0;
    STATUSBAR_DOC_SIZE = 1;
    STATUSBAR_CUR_POS = 2;
    STATUSBAR_EOF_FORMAT = 3;
    STATUSBAR_UNICODE_TYPE = 4;
    STATUSBAR_TYPING_MODE = 5;

  NPPM_GETMENUHANDLE = (NOTEPADPLUS_USER + 25);
    NPPPLUGINMENU = 0;

  NPPM_ENCODESCI = (NOTEPADPLUS_USER + 26);
  //ascii file to unicode
  //int WM_ENCODE_SCI(MAIN_VIEW/SUB_VIEW, 0)
  //return new unicodeMode

  NPPM_DECODESCI = (NOTEPADPLUS_USER + 27);
  //unicode file to ascii
  //int WM_DECODE_SCI(MAIN_VIEW/SUB_VIEW, 0)
  //return old unicodeMode

  NPPM_ACTIVATEDOC = (NOTEPADPLUS_USER + 28);
  //void WM_ACTIVATE_DOC(int index2Activate, int view)

  NPPM_LAUNCHFINDINFILESDLG = (NOTEPADPLUS_USER + 29);
  //void WM_LAUNCH_FINDINFILESDLG(char * dir2Search, char * filtre)

  NPPM_DMMSHOW = (NOTEPADPLUS_USER + 30);
  NPPM_DMMHIDE	= (NOTEPADPLUS_USER + 31);
  NPPM_DMMUPDATEDISPINFO = (NOTEPADPLUS_USER + 32);
  //void WM_DMM_xxx(0, tTbData->hClient)

  NPPM_DMMREGASDCKDLG = (NOTEPADPLUS_USER + 33);
  //void WM_DMM_REGASDCKDLG(0, &tTbData)

  NPPM_LOADSESSION = (NOTEPADPLUS_USER + 34);
  //void WM_LOADSESSION(0, const char* file name)
  NPPM_DMMVIEWOTHERTAB = (NOTEPADPLUS_USER + 35);
  //void WM_DMM_VIEWOTHERTAB(0, tTbData->hClient)
  NPPM_RELOADFILE = (NOTEPADPLUS_USER + 36);
  //BOOL WM_RELOADFILE(BOOL withAlert, char *filePathName2Reload)
  NPPM_SWITCHTOFILE = (NOTEPADPLUS_USER + 37);
  //BOOL WM_SWITCHTOFILE(0, char *filePathName2switch)
  NPPM_SAVECURRENTFILE = (NOTEPADPLUS_USER + 38);
  //BOOL WM_SWITCHTOFILE(0, 0)
  NPPM_SAVEALLFILES	= (NOTEPADPLUS_USER + 39);
  //BOOL WM_SAVEALLFILES(0, 0)
  NPPM_SETMENUITEMCHECK	= (NOTEPADPLUS_USER + 40);
  //void WM_PIMENU_CHECK(UINT	funcItem[X]._cmdID, TRUE/FALSE)
  NPPM_ADDTOOLBARICON = (NOTEPADPLUS_USER + 41); // see TToolbarIcons
  //void WM_ADDTOOLBARICON(UINT funcItem[X]._cmdID, toolbarIcons icon)
  NPPM_GETWINDOWSVERSION = (NOTEPADPLUS_USER + 42);
  //winVer WM_GETWINDOWSVERSION(0, 0)
  NPPM_DMMGETPLUGINHWNDBYNAME = (NOTEPADPLUS_USER + 43);
  //HWND WM_DMM_GETPLUGINHWNDBYNAME(const char *windowName, const char *moduleName)
  // if moduleName is NULL, then return value is NULL
  // if windowName is NULL, then the first found window handle which matches with the moduleName will be returned
  NPPM_MAKECURRENTBUFFERDIRTY = (NOTEPADPLUS_USER + 44);
  //BOOL NPPM_MAKECURRENTBUFFERDIRTY(0, 0)
  NPPM_GETENABLETHEMETEXTUREFUNC = (NOTEPADPLUS_USER + 45);
  //BOOL NPPM_GETENABLETHEMETEXTUREFUNC(0, 0)
  NPPM_GETPLUGINSCONFIGDIR = (NOTEPADPLUS_USER + 46);
  //void NPPM_GETPLUGINSCONFIGDIR(int strLen, char *str)

  // new
  NPPM_MSGTOPLUGIN = (NOTEPADPLUS_USER + 47); // see TCommunicationInfo
	//BOOL NPPM_MSGTOPLUGIN(TCHAR *destModuleName, CommunicationInfo *info)
	// return value is TRUE when the message arrive to the destination plugins.
	// if destModule or info is NULL, then return value is FALSE
//		struct CommunicationInfo {
//			long internalMsg;
//			const TCHAR * srcModuleName;
//			void * info; // defined by plugin
//		};

	NPPM_MENUCOMMAND = (NOTEPADPLUS_USER + 48);
	//void NPPM_MENUCOMMAND(0, int cmdID)
	// uncomment //#include "menuCmdID.h"
	// in the beginning of this file then use the command symbols defined in "menuCmdID.h" file
	// to access all the Notepad++ menu command items

	NPPM_TRIGGERTABBARCONTEXTMENU = (NOTEPADPLUS_USER + 49);
	//void NPPM_TRIGGERTABBARCONTEXTMENU(int view, int index2Activate)

	NPPM_GETNPPVERSION = (NOTEPADPLUS_USER + 50);
	// int NPPM_GETNPPVERSION(0, 0)
	// return version
	// ex : v4.6
	// HIWORD(version) == 4
	// LOWORD(version) == 6

	NPPM_HIDETABBAR = (NOTEPADPLUS_USER + 51);
	// BOOL NPPM_HIDETABBAR(0, BOOL hideOrNot)
	// if hideOrNot is set as TRUE then tab bar will be hidden
	// otherwise it'll be shown.
	// return value : the old status value

	NPPM_ISTABBARHIDE = (NOTEPADPLUS_USER + 52);
	// BOOL NPPM_ISTABBARHIDE(0, 0)
	// returned value : TRUE if tab bar is hidden, otherwise FALSE

	NPPM_CHECKDOCSTATUS = (NOTEPADPLUS_USER + 53);
	// VOID NPPM_CHECKDOCSTATUS(BOOL, 0)

	NPPM_ENABLECHECKDOCOPT = (NOTEPADPLUS_USER + 54);
	// VOID NPPM_ENABLECHECKDOCOPT(OPT, 0)
		// where OPT is :
		CHECKDOCOPT_NONE = 0;
		CHECKDOCOPT_UPDATESILENTLY = 1;
		CHECKDOCOPT_UPDATEGO2END = 2;

	NPPM_GETCHECKDOCOPT = (NOTEPADPLUS_USER + 55);
	// INT NPPM_GETCHECKDOCOPT(0, 0)
	NPPM_SETCHECKDOCOPT = (NOTEPADPLUS_USER + 56);
	// INT NPPM_SETCHECKDOCOPT(OPT, 0)

	NPPM_GETPOSFROMBUFFERID = (NOTEPADPLUS_USER + 57);
	// INT NPPM_GETPOSFROMBUFFERID(INT bufferID, 0)
	// Return VIEW|INDEX from a buffer ID. -1 if the bufferID non existing
	//
	// VIEW takes 2 highest bits and INDEX (0 based) takes the rest (30 bits)
	// Here's the values for the view :
	//  MAIN_VIEW 0
	//  SUB_VIEW  1

	NPPM_GETFULLPATHFROMBUFFERID = (NOTEPADPLUS_USER + 58);
	// INT NPPM_GETFULLPATHFROMBUFFERID(INT bufferID, CHAR *fullFilePath)
	// Get full path file name from a bufferID.
	// Return -1 if the bufferID non existing, otherwise the number of TCHAR copied/to copy
	// User should call it with fullFilePath be NULL to get the number of TCHAR (not including the nul character),
	// allocate fullFilePath with the return values + 1, then call it again to get  full path file name

	NPPM_GETBUFFERIDFROMPOS = (NOTEPADPLUS_USER + 59);
	//wParam: Position of document
	//lParam: View to use, 0 = Main, 1 = Secondary
	//Returns 0 if invalid

	NPPM_GETCURRENTBUFFERID = (NOTEPADPLUS_USER + 60);
	//Returns active Buffer

	NPPM_RELOADBUFFERID = (NOTEPADPLUS_USER + 61);
	//Reloads Buffer
	//wParam: Buffer to reload
	//lParam: 0 if no alert, else alert

	NPPM_SETFILENAME = (NOTEPADPLUS_USER + 63);
*)
	//wParam: BufferID to rename
	//lParam: name to set (TCHAR*)
	//Buffer must have been previously unnamed (eg "new 1" document types)
(*
	NPPM_GETBUFFERLANGTYPE = (NOTEPADPLUS_USER + 64);
	//wParam: BufferID to get LangType from
	//lParam: 0
	//Returns as int, see LangType. -1 on error

	NPPM_SETBUFFERLANGTYPE = (NOTEPADPLUS_USER + 65);
	//wParam: BufferID to set LangType of
	//lParam: LangType
	//Returns TRUE on success, FALSE otherwise
	//use int, see LangType for possible values
	//L_USER and L_EXTERNAL are not supported

	NPPM_GETBUFFERENCODING = (NOTEPADPLUS_USER + 66);
	//wParam: BufferID to get encoding from
	//lParam: 0
	//returns as int, see UniMode. -1 on error

	NPPM_SETBUFFERENCODING = (NOTEPADPLUS_USER + 67);
	//wParam: BufferID to set encoding of
	//lParam: format
	//Returns TRUE on success, FALSE otherwise
	//use int, see UniMode
	//Can only be done on new, unedited files

	NPPM_GETBUFFERFORMAT = (NOTEPADPLUS_USER + 68);
	//wParam: BufferID to get format from
	//lParam: 0
	//returns as int, see formatType. -1 on error

	NPPM_SETBUFFERFORMAT = (NOTEPADPLUS_USER + 69);
	//wParam: BufferID to set format of
	//lParam: format
	//Returns TRUE on success, FALSE otherwise
	//use int, see formatType



  // Notification code
  NPPN_FIRST = 1000;
  NPPN_READY = (NPPN_FIRST + 1);
  // To notify plugins that all the procedures of launchment of notepad++ are done.
  //scnNotification->nmhdr.code = NPPN_READY;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_TB_MODIFICATION = (NPPN_FIRST + 2);
  // To notify plugins that toolbar icons can be registered
  //scnNotification->nmhdr.code = NPPN_TB_MODIFICATION;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_FILEBEFORECLOSE = (NPPN_FIRST + 3);
  // To notify plugins that the current file is about to be closed
  //scnNotification->nmhdr.code = NPPN_FILEBEFORECLOSE;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_FILEOPENED = (NPPN_FIRST + 4);
  // To notify plugins that the current file is just opened
  //scnNotification->nmhdr.code = NPPN_FILEOPENED;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_FILECLOSED = (NPPN_FIRST + 5);
  // To notify plugins that the current file is just closed
  //scnNotification->nmhdr.code = NPPN_FILECLOSED;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_FILEBEFOREOPEN = (NPPN_FIRST + 6);
  // To notify plugins that the current file is about to be opened
  //scnNotification->nmhdr.code = NPPN_FILEBEFOREOPEN;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_FILEBEFORESAVE = (NPPN_FIRST + 7);
  // To notify plugins that the current file is about to be saved
  //scnNotification->nmhdr.code = NPPN_FILEBEFOREOPEN;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_FILESAVED = (NPPN_FIRST + 8);
  // To notify plugins that the current file is just saved
  //scnNotification->nmhdr.code = NPPN_FILECLOSED;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  NPPN_SHUTDOWN = (NPPN_FIRST + 9);
  // To notify plugins that Notepad++ is about to be shutdowned.
  //scnNotification->nmhdr.code = NPPN_SHOUTDOWN;
  //scnNotification->nmhdr.hwndFrom = hwndNpp;
  //scnNotification->nmhdr.idFrom = 0;

  RUNCOMMAND_USER    = (WM_USER + 3000);
    VAR_NOT_RECOGNIZED = 0;
    FULL_CURRENT_PATH = 1;
    CURRENT_DIRECTORY = 2;
    FILE_NAME = 3;
    NAME_PART = 4;
    EXT_PART = 5;
    CURRENT_WORD = 6;
    NPP_DIRECTORY = 7;
  NPPM_GETFULLCURRENTPATH = (RUNCOMMAND_USER + FULL_CURRENT_PATH);
  NPPM_GETCURRENTDIRECTORY = (RUNCOMMAND_USER + CURRENT_DIRECTORY);
  NPPM_GETFILENAME = (RUNCOMMAND_USER + FILE_NAME);
  NPPM_GETNAMEPART = (RUNCOMMAND_USER + NAME_PART);
  NPPM_GETEXTPART = (RUNCOMMAND_USER + EXT_PART);
  NPPM_GETCURRENTWORD = (RUNCOMMAND_USER + CURRENT_WORD);
  NPPM_GETNPPDIRECTORY = (RUNCOMMAND_USER + NPP_DIRECTORY);

  MACRO_USER    = (WM_USER + 4000);
  WM_ISCURRENTMACRORECORDED = (MACRO_USER + 01);
  WM_MACRODLGRUNMACRO       = (MACRO_USER + 02);


{ Humm.. is tis npp specific? }
  SCINTILLA_USER = (WM_USER + 2000);
{
#define WM_DOCK_USERDEFINE_DLG      (SCINTILLA_USER + 1)
#define WM_UNDOCK_USERDEFINE_DLG    (SCINTILLA_USER + 2)
#define WM_CLOSE_USERDEFINE_DLG		(SCINTILLA_USER + 3)
#define WM_REMOVE_USERLANG		    (SCINTILLA_USER + 4)
#define WM_RENAME_USERLANG			(SCINTILLA_USER + 5)
#define WM_REPLACEALL_INOPENEDDOC	(SCINTILLA_USER + 6)
#define WM_FINDALL_INOPENEDDOC  	(SCINTILLA_USER + 7)
}
  WM_DOOPEN = (SCINTILLA_USER + 8);
{
#define WM_FINDINFILES			  	(SCINTILLA_USER + 9)
}
*)

{ docking.h }
//   defines for docking manager
  CONT_LEFT = 0;
  CONT_RIGHT = 1;
  CONT_TOP = 2;
  CONT_BOTTOM = 3;
  DOCKCONT_MAX = 4;

// mask params for plugins of internal dialogs
  DWS_ICONTAB = 1; // Icon for tabs are available
  DWS_ICONBAR = 2; // Icon for icon bar are available (currently not supported)
  DWS_ADDINFO = 4; // Additional information are in use

// default docking values for first call of plugin
  DWS_DF_CONT_LEFT = CONT_LEFT shl 28;	        // default docking on left
  DWS_DF_CONT_RIGHT = CONT_RIGHT shl 28;	// default docking on right
  DWS_DF_CONT_TOP = CONT_TOP shl 28;	        // default docking on top
  DWS_DF_CONT_BOTTOM = CONT_BOTTOM shl 28;	// default docking on bottom
  DWS_DF_FLOATING = $80000000;			// default state is floating

{ dockingResource.h }
  DMN_FIRST = 1050;
  DMN_CLOSE = (DMN_FIRST + 1); //nmhdr.code = DWORD(DMN_CLOSE, 0)); //nmhdr.hwndFrom = hwndNpp; //nmhdr.idFrom = ctrlIdNpp;
  DMN_DOCK = (DMN_FIRST + 2);
  DMN_FLOAT = (DMN_FIRST + 3); //nmhdr.code = DWORD(DMN_XXX, int newContainer);	//nmhdr.hwndFrom = hwndNpp; //nmhdr.idFrom = ctrlIdNpp;
implementation

end.
